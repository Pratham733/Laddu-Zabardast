"use client";

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { toast } from '@/hooks/use-toast';
import { UserPlus, Mail, Lock, Loader2, Chrome } from 'lucide-react';
import { useAuth } from '@/context/auth-context';
import { Separator } from '@/components/ui/separator';
import { signIn } from "next-auth/react";
import { InteractiveHoverButton } from '@/components/magicui/interactive-hover-button';
import { Button } from '@/components/ui/button';
import { MailOpen } from 'lucide-react';

const signupSchema = z.object({
  firstName: z.string().min(1, { message: "First name is required." }),
  lastName: z.string().min(1, { message: "Last name is required." }),
  email: z.string().email({ message: "Please enter a valid email address." }),
  password: z.string().min(6, { message: "Password must be at least 6 characters." }),
});

type SignupFormValues = z.infer<typeof signupSchema>;

const ImpressiveLamp = () => (
  <div className="flex flex-col items-center mb-4 relative select-none">
    {/* Ambient Glow Background */}
    <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[200px] h-[200px] bg-yellow-100/30 rounded-full blur-3xl animate-pulse" />
    
    <svg 
      width="120" 
      height="160" 
      viewBox="0 0 120 160" 
      fill="none" 
      xmlns="http://www.w3.org/2000/svg"
      className="animate-float"
    >
      {/* Decorative Top Arc */}
      <path d="M40,10 Q60,0 80,10" stroke="#444" strokeWidth="3" fill="none" />
      
      {/* Main Power Cable */}
      <path d="M60,0 V30" stroke="#666" strokeWidth="4" />
      
      {/* Lamp Head */}
      <g transform="rotate(-15 60 50)">
        {/* Outer Shade */}
        <ellipse cx="60" cy="50" rx="30" ry="15" fill="url(#lampGradient)" />
        {/* Inner Shade */}
        <ellipse cx="60" cy="48" rx="25" ry="12" fill="#2a2a2a" />
      </g>

      {/* Glowing Bulb */}
      <circle cx="60" cy="60" r="8" fill="url(#bulbGradient)" className="animate-glow">
        <animate attributeName="opacity" values="0.8;1;0.8" dur="2s" repeatCount="indefinite" />
      </circle>

      {/* Light Beam */}
      <g className="light-beam">
        <path
          d="M30,65 L90,65 L100,150 L20,150"
          fill="url(#beamGradient)"
          opacity="0.4"
          className="animate-pulse"
        />
        {/* Secondary Light Beams */}
        <path d="M45,65 L75,65 L80,150 L40,150" fill="url(#beamGradient)" opacity="0.3" />
        <path d="M55,65 L65,65 L67,150 L53,150" fill="url(#beamGradient)" opacity="0.2" />
      </g>

      {/* Decorative Elements */}
      <circle cx="60" cy="40" r="2" fill="gold" className="animate-ping" />
      <path d="M45,45 Q60,40 75,45" stroke="#888" strokeWidth="1" fill="none" />

      {/* Gradients */}
      <defs>
        <radialGradient id="lampGradient" cx="50%" cy="50%" r="50%">
          <stop offset="80%" stopColor="#333" />
          <stop offset="100%" stopColor="#111" />
        </radialGradient>
        
        <radialGradient id="bulbGradient" cx="50%" cy="50%" r="50%">
          <stop offset="0%" stopColor="#fff7d6" />
          <stop offset="50%" stopColor="#ffe766" />
          <stop offset="100%" stopColor="#ffcd00" />
        </radialGradient>

        <linearGradient id="beamGradient" x1="0%" y1="0%" x2="0%" y2="100%">
          <stop offset="0%" stopColor="rgba(255, 247, 214, 0.6)" />
          <stop offset="100%" stopColor="rgba(255, 247, 214, 0)" />
        </linearGradient>
      </defs>
    </svg>

    {/* Additional Light Rays */}
    <div className="absolute -left-2 top-1/2 w-[2px] h-[80px] bg-gradient-to-b from-yellow-200/50 to-transparent transform -rotate-15"></div>
    <div className="absolute -right-2 top-1/2 w-[2px] h-[80px] bg-gradient-to-b from-yellow-200/50 to-transparent transform rotate-15"></div>
    <div className="absolute top-[60px] left-1/2 -translate-x-1/2 w-[2px] h-[80px] bg-gradient-to-b from-yellow-200/50 to-transparent transform rotate-15"></div>
  </div>
);

export default function SignupPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { setToken } = useAuth();
  const [isLoading, setIsLoading] = useState(false);
  const [isGoogleLoading, setIsGoogleLoading] = useState(false);

  const form = useForm<SignupFormValues>({
    resolver: zodResolver(signupSchema),
    defaultValues: {
      firstName: '',
      lastName: '',
      email: '',
      password: '',
    },
  });

  const handleSuccessRedirect = () => {
    const redirectUrl = searchParams?.get('redirect') || '/';
    router.push(redirectUrl);
  };

  const onSubmit = async (data: SignupFormValues) => {
    setIsLoading(true);
    let responseText = '';
    
    try {
      const response = await fetch('/api/signup', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ firstName: data.firstName, lastName: data.lastName, email: data.email, password: data.password }),
      });

      responseText = await response.text();

      if (!response.ok) {
        let errorMsg = `Signup failed. Server returned status ${response.status}.`;
        try {
          const result = JSON.parse(responseText);
          errorMsg = result.error || errorMsg;
        } catch (parseError: any) {
          console.error("Signup API Error - Non-JSON response:", responseText);
          if (responseText.toLowerCase().includes('<!doctype html')) {
            errorMsg = "Signup failed due to a server error. Please try again later.";
          } else {
            errorMsg = `Signup failed. Server returned: ${responseText.substring(0, 100)}... Check server logs.`;
          }
        }
        toast({
          title: "Signup Failed",
          description: errorMsg,
          variant: "destructive",
        });
      } else {
        try {
          const result = JSON.parse(responseText);
          toast({
            title: "Signup Successful",
            description: "Your account has been created. Please log in.",
          });
          const loginUrl = new URL('/login', window.location.origin);
          if (searchParams?.get('redirect')) {
            loginUrl.searchParams.set('redirect', searchParams.get('redirect')!);
          }
          router.push(loginUrl.toString());
        } catch (jsonError) {
          console.error("Failed to parse successful signup response as JSON:", responseText);
          toast({
            title: "Signup Partially Successful?",
            description: "Account likely created, but an issue occurred processing the success response. Please try logging in.",
            variant: "destructive"
          });
          router.push('/login');
        }
      }
    } catch (error: any) {
      console.error("Signup network/fetch error:", error);
      toast({
        title: "Signup Failed",
        description: "A network error occurred during signup. Please check your connection and try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleSignUp = () => {
    setIsGoogleLoading(true);
    signIn("google", { callbackUrl: "/" })
      .catch((error) => {
        console.error("Google Sign-In error:", error);
        toast({ title: "Google Sign-In Failed", description: "Unable to sign in with Google.", variant: "destructive" });
      })
      .finally(() => {
        setIsGoogleLoading(false);
      });
  };

  return (
    <div className="container flex h-screen w-screen flex-col items-center justify-center">
      <Card className="w-full max-w-md shadow-xl relative overflow-visible bg-white/95 backdrop-blur-sm border-orange-100/20">
        <CardHeader className="space-y-1 flex flex-col items-center">
          <ImpressiveLamp />
          <CardTitle className="text-3xl font-black tracking-tight bg-gradient-to-r from-orange-600 via-amber-500 to-yellow-500 bg-clip-text text-transparent animate-gradient-x">
            Create an Account
          </CardTitle>
          <CardDescription className="text-center text-gray-600">
            Enter your details below to create your account
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="firstName"
                  render={({ field, fieldState }) => (
                    <FormItem>
                      <div>
                        <FormLabel className="flex items-center gap-2 text-base font-semibold bg-gradient-to-r from-orange-500 to-amber-500 bg-clip-text text-transparent">
                          <UserPlus className="h-4 w-4" />
                          First Name
                        </FormLabel>
                        <FormControl>
                          <Input
                            placeholder="John"
                            {...field}
                            className={`rounded-xl border-2 transition-all duration-300 px-4 py-2 bg-white/50 backdrop-blur-sm ${
                              fieldState.error
                                ? 'border-red-300 focus:border-red-500'
                                : 'border-orange-100 focus:border-orange-300 hover:border-orange-200'
                            }`}
                          />
                        </FormControl>
                        {fieldState.error && (
                          <FormMessage className="text-sm text-red-500 mt-1" />
                        )}
                      </div>
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="lastName"
                  render={({ field, fieldState }) => (
                    <FormItem>
                      <div>
                        <FormLabel className="flex items-center gap-2 text-base font-semibold bg-gradient-to-r from-orange-500 to-amber-500 bg-clip-text text-transparent">
                          <UserPlus className="h-4 w-4" />
                          Last Name
                        </FormLabel>
                        <FormControl>
                          <Input
                            placeholder="Doe"
                            {...field}
                            className={`rounded-xl border-2 transition-all duration-300 px-4 py-2 bg-white/50 backdrop-blur-sm ${
                              fieldState.error
                                ? 'border-red-300 focus:border-red-500'
                                : 'border-orange-100 focus:border-orange-300 hover:border-orange-200'
                            }`}
                          />
                        </FormControl>
                        {fieldState.error && (
                          <FormMessage className="text-sm text-red-500 mt-1" />
                        )}
                      </div>
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="email"
                render={({ field, fieldState }) => (
                  <FormItem>
                    <div>
                      <FormLabel className="flex items-center gap-2 text-base font-semibold bg-gradient-to-r from-orange-500 to-amber-500 bg-clip-text text-transparent">
                        <Mail className="h-4 w-4" />
                        Email
                      </FormLabel>
                      <FormControl>
                        <Input
                          placeholder="name@example.com"
                          type="email"
                          {...field}
                          className={`rounded-xl border-2 transition-all duration-300 px-4 py-2 bg-white/50 backdrop-blur-sm ${
                            fieldState.error
                              ? 'border-red-300 focus:border-red-500'
                              : 'border-orange-100 focus:border-orange-300 hover:border-orange-200'
                          }`}
                        />
                      </FormControl>
                      {fieldState.error && (
                        <FormMessage className="text-sm text-red-500 mt-1" />
                      )}
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="password"
                render={({ field, fieldState }) => (
                  <FormItem>
                    <div>
                      <FormLabel className="flex items-center gap-2 text-base font-semibold bg-gradient-to-r from-orange-500 to-amber-500 bg-clip-text text-transparent">
                        <Lock className="h-4 w-4" />
                        Password
                      </FormLabel>
                      <FormControl>
                        <Input
                          placeholder="••••••••"
                          type="password"
                          {...field}
                          className={`rounded-xl border-2 transition-all duration-300 px-4 py-2 bg-white/50 backdrop-blur-sm ${
                            fieldState.error
                              ? 'border-red-300 focus:border-red-500'
                              : 'border-orange-100 focus:border-orange-300 hover:border-orange-200'
                          }`}
                        />
                      </FormControl>
                      {fieldState.error && (
                        <FormMessage className="text-sm text-red-500 mt-1" />
                      )}
                    </div>
                  </FormItem>
                )}
              />

              <div className="w-full">
                <InteractiveHoverButton
                  type="submit"
                  disabled={isLoading}
                  className="w-full py-2 rounded-xl bg-gradient-to-r from-orange-500 to-amber-500 text-white font-semibold relative overflow-hidden transition-all duration-300"
                >
                  {isLoading ? (
                    <div>
                      <Loader2 className="h-5 w-5 mx-auto animate-spin" />
                    </div>
                  ) : (
                    <span>Sign Up</span>
                  )}
                </InteractiveHoverButton>
              </div>
            </form>
          </Form>
        </CardContent>
        <CardFooter className="flex flex-col space-y-4">
          <div className="relative w-full">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-white px-2 text-muted-foreground">Or continue with</span>
            </div>
          </div>
          <div className="w-full">
            <Button
              type="button"
              variant="outline"
              disabled={isGoogleLoading}
              className="w-full rounded-xl border-2 border-orange-100 hover:border-orange-300 transition-all duration-300"
              onClick={() => signIn("google")}
            >
              {isGoogleLoading ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Chrome className="mr-2 h-4 w-4" />
              )}
              Google
            </Button>
          </div>
          <p className="px-8 text-center text-sm text-muted-foreground">
            Already have an account?{" "}
            <Link
              href={`/login${searchParams?.get('redirect') ? `?redirect=${searchParams.get('redirect')}` : ''}`}
              className="text-orange-500 hover:text-orange-600 font-semibold transition-colors"
            >
              Sign in
            </Link>
          </p>
        </CardFooter>
      </Card>
    </div>
  );
}
